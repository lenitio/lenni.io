{"version":3,"sources":["components/Title/index.js","pages/Frontpage/Frontpage.js","components/Cursor/index.js","App.js","serviceWorker.js","index.js"],"names":["titleSizes","Title","styled","props","type","concat","level","React","createElement","className","children","_templateObject","p","spacingBottom","Button","a","Frontpage_templateObject","SubTitle","h2","_templateObject2","Frontpage","react_default","components_Title","href","Component","Cursor","div","Cursor_templateObject","CursorContainer","state","top","left","scale","color","myRef","createRef","_this2","this","document","addEventListener","e","setState","setTimeout","console","log","target","localName","clientX","clientY","style","transform","backgroundColor","RootContainer","App_templateObject","App","Helmet","charSet","rel","Cursor_CursorContainer","Frontpage_Frontpage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2jBAGA,IAAMA,EAAa,CAAC,OAAQ,SAAU,OAAQ,SAAS,UAAW,QAqBnDC,EATDC,YAVS,SAACC,GACtB,IAAMC,EAAI,IAAAC,OAAOF,EAAMG,OACvB,OAASC,IAAMC,cACbJ,EACE,CAACK,UAAWN,EAAMM,WAClBN,EAAMO,WAKER,CAAHS,IACI,SAAAC,GAAC,OAAIZ,EAAWY,EAAEN,MAAM,IAIpB,SAAAM,GAAC,OAAIA,EAAEC,8vBChB1B,IAAMC,EAASZ,IAAOa,EAAVC,KAkBNC,EAAWf,IAAOgB,GAAVC,IAKK,SAAAP,GAAC,OAAKA,EAAEC,eAAkBD,EAAEC,gBAGzBO,mLAEjB,OACEC,EAAAN,EAAAP,cAAA,WACGa,EAAAN,EAAAP,cAACc,EAAD,CAAOhB,MAAO,EAAGO,cAAe,GAAhC,kBACAQ,EAAAN,EAAAP,cAACS,EAAD,CAAUJ,cAAe,GAAzB,qCACAQ,EAAAN,EAAAP,cAACM,EAAD,CAAQS,KAAK,yBAAb,0BAN8BC,8dC1BxC,IAAMC,EAASvB,IAAOwB,IAAVC,KAaSC,6MACjBC,MAAO,CACLC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,MAAO,UAETC,MAAQ3B,IAAM4B,+FAIG,IAAAC,EAAAC,KAEjBC,SAASC,iBAAiB,YAAa,SAACC,GACrCJ,EAAKK,SAAS,CACXT,MAAO,GACPC,MAAO,SAETS,WAAW,kBACXN,EAAKK,SAAS,CACZT,MAAO,EACPC,MAAO,UACL,OAGRK,SAASC,iBAAiB,YAAa,SAACC,GACtCG,QAAQC,IAAIJ,GACc,MAAvBA,EAAEK,OAAOC,UACVV,EAAKK,SAAS,CACZT,MAAO,MAGTI,EAAKK,SAAS,CACZT,MAAO,IAGTI,EAAKK,SAAS,CACZV,KAAMS,EAAEO,QACRjB,IAAKU,EAAEQ,6CASb,IAAIlB,EAAMO,KAAKR,MAAMC,IAAM,GACvBC,EAAOM,KAAKR,MAAME,KAAO,GACzBC,EAAQK,KAAKR,MAAMG,MACnBC,EAAQI,KAAKR,MAAMI,MACvB,OACEZ,EAAAN,EAAAP,cAACiB,EAAD,CAAQwB,MAAO,CAACnB,IAAKA,EAAI,KAAMC,KAAMA,EAAK,KAAMmB,UAAS,SAAA7C,OAAW2B,EAAX,KAAqBmB,gBAAe,GAAA9C,OAAK4B,aApD3DT,yOCV7C,IAAM4B,EAAgBlD,IAAOwB,IAAV2B,KAwBJC,MAdf,WACE,OACEjC,EAAAN,EAAAP,cAAC4C,EAAD,KACE/B,EAAAN,EAAAP,cAAC+C,EAAA,OAAD,KACElC,EAAAN,EAAAP,cAAA,QAAMgD,QAAQ,UACdnC,EAAAN,EAAAP,cAAA,+CACAa,EAAAN,EAAAP,cAAA,QAAMiD,IAAI,YAAYlC,KAAK,sBAE7BF,EAAAN,EAAAP,cAACkD,EAAD,MACArC,EAAAN,EAAAP,cAACmD,EAAD,QCdcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAO7C,EAAAN,EAAAP,cAAC2D,EAAD,MAAS7B,SAAS8B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.02ae1d00.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst titleSizes = ['4rem', '2.5rem', '2rem', '1.5rem','1.25rem', '1rem']\n\nconst TitleContainer = (props) => {\n  const type = `h${props.level}`;\n  return ( React.createElement(\n    type,\n      {className: props.className},\n      props.children\n    )\n  )\n}\n\nconst Title = styled(TitleContainer)`\n  font-size: ${p => titleSizes[p.level-1]};\n  font-family: 'Montserrat', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  line-height: 1.25;\n  font-weight: 700;\n  margin-bottom: ${p => p.spacingBottom}rem;\n  color: #0F0F16;\n`\n\nexport default Title","import React, { Component } from 'react'\nimport styled from 'styled-components';\nimport Title from '../../components/Title';\n\nconst Button = styled.a`\n  display: inline-flex;\n  text-transform: uppercase;\n  text-decoration: none;\n  color: #fff;\n  background-color: #3FF1C8;\n  padding: 1.25rem 2rem;\n  box-shadow: 0 15px 30px -20px #3FF1C8;\n  font-weight: 700;\n  letter-spacing: 3px;\n  font-size: 0.875rem;\n  margin-top: 1rem;\n  transition: box-shadow .3s;\n  :hover {\n    box-shadow: none;\n  }\n`\n\nconst SubTitle = styled.h2`\n  font-size: 1.50rem;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  line-height: 1.25;\n  font-weight: 300;\n  margin-bottom: ${p => (p.spacingBottom) && p.spacingBottom}rem;\n  color: #0F0F16;\n`\n export default class Frontpage extends Component {\n   render() {\n     return (\n       <div>\n          <Title level={1} spacingBottom={1} >Lennart Hammer</Title>\n          <SubTitle spacingBottom={1}>Web-Entwickler, HTML/CSS/JS ninja</SubTitle>\n          <Button href=\"mailto:hello@lenni.io\">hello@lenni.io</Button>\n       </div>\n     )\n   }\n }\n ","import React, { Component } from 'react'\nimport styled from 'styled-components';\n\n\nconst Cursor = styled.div`\n  width: 32px;\n  height: 32px;\n  position: absolute;\n  border-radius: 16px;\n  position: absolute;\n  background-color: #f00;\n  opacity: 0.8;\n  mix-blend-mode: screen;\n  pointer-events: none;\n  transition: transform .375s cubic-bezier(0.175, 0.885, 0.32, 1), background-color .375s, top .125s cubic-bezier(0.175, 0.885, 0.32, 1), left .125s cubic-bezier(0.175, 0.885, 0.32, 1);\n` \n\nexport default class CursorContainer extends Component {\n    state ={\n      top: 0,\n      left: 0,  \n      scale: 1,\n      color: '#f00'\n    }\n    myRef = React.createRef();\n    \n  \n\n  componentDidMount(){\n\n    document.addEventListener('mousedown', (e) =>{\n       this.setState({\n          scale: 0.8,\n          color: '#600'\n        })\n        setTimeout(() =>\n        this.setState({\n          scale: 1,\n          color: '#f00'\n        }), 200)\n    })\n\n    document.addEventListener('mousemove', (e) =>{\n      console.log(e)\n      if(e.target.localName === 'a'){\n        this.setState({\n          scale: 1.6\n        })\n      } else {\n        this.setState({\n          scale: 1\n        })\n      }\n        this.setState({\n          left: e.clientX,\n          top: e.clientY,\n          \n        })\n        \n    })\n    \n  }\n  \n  render() {\n    let top = this.state.top - 16 ;\n    let left = this.state.left - 16;\n    let scale = this.state.scale;\n    let color = this.state.color;\n    return (\n      <Cursor style={{top: top+'px', left: left+'px', transform: `scale(${scale})`, backgroundColor: `${color}` }}/>\n    )\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Frontpage from './pages/Frontpage/Frontpage'\nimport {Helmet} from 'react-helmet';\nimport CursorContainer from './components/Cursor';\n\nconst RootContainer = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  justify-content: center;\n  align-items:center;\n  text-align: center;\n  posiition: relative;\n`\n\nfunction App() {\n  return (\n    <RootContainer>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>lenni.io | HTML, CSS, JS Ninja</title>\n        <link rel=\"canonical\" href=\"http://lenni.io/\" />\n      </Helmet>\n      <CursorContainer />\n      <Frontpage />        \n    </RootContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}